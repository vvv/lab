#!/usr/bin/env python3

import pygame
import sys
from time import sleep


def dragonborn():
    pygame.init()

    width = 800
    height = 600
    speed = [5, 5]

    screen = pygame.display.set_mode((width, height))

    ball = pygame.image.load('dragonborn.png')
    ballrect = ball.get_rect()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()

        ballrect = ballrect.move(speed)
        if ballrect.left < 0 or ballrect.right > width:
            speed[0] = -speed[0]
        if ballrect.top < 0 or ballrect.bottom > height:
            speed[1] = -speed[1]

        screen.fill((127, 127, 127))
        screen.blit(ball, ballrect)
        pygame.display.flip()


def main():
    pygame.init()
    W, H = 800, 600
    screen = pygame.display.set_mode((W, H))

    width, height = 500, 500
    # Coordinates of upper left corner of the labyrinth.
    P = ((W - width)/2, (H - height)/2)
    rect = pygame.Rect(P[0], P[1], width, height)

    lab = (
        'w  ww ',
        'ww w  ',
        'w  w w',
        '  ww w',
        'w  w w',
        'w ww w'
    )
    assert len(set(map(len, lab))) == 1
    assert len(lab[0]) == len(lab)
    w = width / len(lab[0])  # cell width
    h = height / len(lab)  # cell height

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()

        screen.fill((255, 255, 255))
        pygame.draw.rect(screen, (0, 0, 0), rect)
        for row, r in enumerate(lab):
            for col, c in enumerate(r):
                if c == 'w':  # wall
                    pygame.draw.rect(
                        screen, (127, 127, 127),
                        pygame.Rect(P[0] + col * w, P[1] + row * h, w, h))

        pygame.display.flip()
        sleep(0.1)


if __name__ == '__main__':
    main()
